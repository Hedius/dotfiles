#!/bin/bash

# Based on: https://github.com/flameshot-org/scripts/blob/main/sftpuploader/screenshotuploader.sh / modified for ftps

source ~/.config/flameshot/flameshot-upload.conf

# set ssl:priority NORMAL:+VERS-TLS1.0:+VERS-TLS1.1:+VERS-TLS1.2
# set ftps:initial-prot P
# set ftp:ssl-allow yes
# set ftp:ssl-force yes
# set ftp:ssl-protect-list yes
# set ftp:ssl-protect-data yes
# set ftp:ssl-protect-fxp yes


# grab the file format that is defined by the user in the Flameshot config
SCREENSHOT_FORMAT="$(grep -P -o '(?<=^saveAsFileExtension\=).+$' ~/.config/flameshot/flameshot.ini)"
# if no format was specified
if [ "${SCREENSHOT_FORMAT}" == "" ]; then
    # fallback to png which is default of Flameshot
    SCREENSHOT_FORMAT="png"
fi

# construct the file name
FILE="$(date +%F_%H.%M.%S)_$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 10).${SCREENSHOT_FORMAT}"

# a little trick to expand tilde (~) to the actual path
STORAGE="$(eval echo "${STORAGE}")"
PATH_ON_SERVER="$(eval echo "${PATH_ON_SERVER}")"

# make sure the local folder exists
mkdir --parents "${STORAGE}"

# take the screenshot and capture the output
FLAMESHOT_STATUS=$(flameshot gui --path "${STORAGE}/${FILE}" 2>&1)

# check if user aborted the screenshot
if [ "${FLAMESHOT_STATUS}" == "flameshot: info: Screenshot aborted." ]; then
    echo "The screenshot process was aborted"
    exit 0
fi

# inform the user
echo "${STORAGE}/${FILE} created!"


# copy the file with FTPS to the server.
lftp -e "set ftp:ssl-force true; set ftp:ssl-allow true; set ftp:ssl-protect-data true; set ftp:ssl-protect-fxp true; set ftp:ssl-protect-list true;  set ftp:passive-mode ${PASSIVE}; put -O ${PATH_ON_SERVER} ${STORAGE}/${FILE}; exit;" \
    -u $USER,$PW ftp://$SERVER:$PORT

# copy the link to the clipboard
 if [ $? -ne 0 ]; then
  notify-send --icon terminal --category 'transfer.error' "Screenshot upload error" "Could not upload $FILE to $SFTPSERVER"
else
  URL="$LINK_PREFIX/$FILE"
  wl-copy $URL
  notify-send --icon terminal "Screenshot uploaded" "URL: $URL"
fi

